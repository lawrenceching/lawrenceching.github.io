<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[IMLC.ME]]></title>
  <link href="http://www.imlc.me/atom.xml" rel="self"/>
  <link href="http://www.imlc.me/"/>
  <updated>2016-04-17T01:36:36+08:00</updated>
  <id>http://www.imlc.me/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[论文引用生成工具]]></title>
    <link href="http://www.imlc.me/14608257960114.html"/>
    <updated>2016-04-17T00:56:36+08:00</updated>
    <id>http://www.imlc.me/14608257960114.html</id>
    <content type="html"><![CDATA[
<p><img src="http://7xt24f.com1.z0.glb.clouddn.com/2016-04-17-ic_github.png" alt="ic_github"/></p>

<p>占个位置先</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Integer 缓存机制的小坑点]]></title>
    <link href="http://www.imlc.me/605.html"/>
    <updated>2016-04-16T23:52:11+08:00</updated>
    <id>http://www.imlc.me/605.html</id>
    <content type="html"><![CDATA[
<p>Integer 是 Java 5 引入的新特性，该特性能节省内存和改善性能。同样被引入缓存机制的还有 Byte，Short，Long，Character，缓存范围都是在 [-128,127] （Character是在[0,127]）之间。</p>

<p>但是有几点需要注意的是：<br/>
1. 对 Integer 对象引入了 IntegerCache 类，其他封装类型也有对应的 XxxCache。<br/>
2. 该缓存特性只有在 autoboxing 过程中使用，换言之，使用 constructor 创建的 Integer 并不能被缓存。<br/>
3. 因为缓存机制的存在，在缓存范围内的对象都来自同一个缓存。带来的副作用是使用“==”地址比较运算符比较两个看似不一样的对象，得到的是 true。网上其他文章的说法是因而可以使用 == 来比较直接比较两个对象的值。但我觉得这样理解容易造成偏差。Java 规范并没有约定 [-128,127] 的范围内 == 用作值比较，这只是一个副作用。<br/>
4. 只有 Integer 对象可以通过指定 JVM 启动参数来修改缓存上限。</p>

<pre><code>-XX:AutoBoxCacheMax=size
</code></pre>

<p>所以说写代码的时候还是不要把==用作值比较。<br/>
 <br/>
老实说这个缓存特性带来的不一致性要是导致了什么BUG实在很难排查。当用了这个特性写了点什么之后，难保后来者不会产生迷惑。所以日常编码中还是尽量避开这个点。<br/>
 <br/>
简单到爆的实验代码：<br/>
简单地验证Java Integer缓存特性</p>

<pre><code>import com.sun.istack.internal.NotNull;
 
/**
 * Created by Lawrence on 15/11/9.
 */
public class Main {
    public static void main(String[] argv){
        Integer int1 = 100;
        Integer int2 = 100;
 
        if(int1==int2){
            print(&quot;int1 is equal to int2&quot;);
        } else {
            print(&quot;int1 is not equal to int2&quot;);
        }
        // prints &quot;int1 is equal to int2&quot;
 
        Integer int3 = 2333;
        Integer int4 = 2333;
 
        if(int3==int4){
            print(&quot;int3 is equal to int4&quot;);
        } else {
            print(&quot;int3 is not equal to int4&quot;);
        }
        // prints &quot;int3 is not equal to int4&quot;
 
        Integer int5 = 100;
        Integer int6 = new Integer(100);
 
        if(int5==int6){
            print(&quot;int5 is equal to int6&quot;);
        } else {
            print(&quot;int5 is not equal to int6&quot;);
        }
        // prints &quot;int5 is not equal to int6&quot;
    }
 
    public static void print(String str){
        System.out.println(str);
    }
 
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The testing of MWeb Lite]]></title>
    <link href="http://www.imlc.me/14503308221758.html"/>
    <updated>2015-12-17T13:40:22+08:00</updated>
    <id>http://www.imlc.me/14503308221758.html</id>
    <content type="html"><![CDATA[
<p>I&rsquo;m new for MWeb. So I try to write something on there to check the apprerance.</p>

<pre><code>print(&quot;Hello World&quot;)
</code></pre>

]]></content>
  </entry>
  
</feed>
